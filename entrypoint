#!/bin/bash
set -e

export REDASH_BASE_PATH=$PWD
export PYTHONUNBUFFERED=0
export REDASH_LOG_LEVEL=INFO
export REDASH_REDIS_URL=redis://localhost:6379/0
export POSTGRES_PASSWORD=postgre
export REDASH_COOKIE_SECRET=false
export REDASH_SECRET_KEY=c292a0a3aa32397cdb050e233733900f
export REDASH_DATABASE_URL=postgresql://postgres:123123@localhost/redash


worker() {
  WORKERS_COUNT=${WORKERS_COUNT:-2}
  QUEUES=${QUEUES:-queries,scheduled_queries,celery,schemas}
  WORKER_EXTRA_OPTIONS=${WORKER_EXTRA_OPTIONS:-}

  echo "Starting $WORKERS_COUNT workers for queues: $QUEUES..."
  exec ./env/bin/celery worker --app=redash.worker -c$WORKERS_COUNT -Q$QUEUES -linfo --max-tasks-per-child=10 -Ofair $WORKER_EXTRA_OPTIONS
}

scheduler() {
  WORKERS_COUNT=${WORKERS_COUNT:-1}
  QUEUES=${QUEUES:-celery}
  SCHEDULE_DB=${SCHEDULE_DB:-celerybeat-schedule}

  echo "Starting scheduler and $WORKERS_COUNT workers for queues: $QUEUES..."

  exec ./env/bin/celery worker --app=redash.worker --beat -s$SCHEDULE_DB -c$WORKERS_COUNT -Q$QUEUES -linfo --max-tasks-per-child=10 -Ofair
}

server() {
  exec ./env/bin/gunicorn -b 0.0.0.0:8222 --name redash -w${REDASH_WEB_WORKERS:-4} redash.wsgi:app
}

create_db() {
  exec ./env/bin/python ./manage.py database create-tables
}

celery_healthcheck() {
  exec ./env/bin/celery inspect ping --app=redash.worker -d celery@$HOSTNAME
}

help() {
  echo "Redash Docker."
  echo ""
  echo "Usage:"
  echo ""

  echo "server -- start Redash server (with gunicorn)"
  echo "worker -- start Celery worker"
  echo "scheduler -- start Celery worker with a beat (scheduler) process"
  echo "celery_healthcheck -- runs a Celery healthcheck. Useful for Docker's HEALTHCHECK mechanism."
  echo ""
  echo "shell -- open shell"
  echo "dev_server -- start Flask development server with debugger and auto reload"
  echo "debug -- start Flask development server with remote debugger via ptvsd"
  echo "create_db -- create database tables"
  echo "manage -- CLI to manage redash"
  echo "tests -- run tests"
}

tests() {
  export REDASH_DATABASE_URL="postgresql://postgres@postgres/tests"

  if [ $# -eq 0 ]; then
    TEST_ARGS=tests/
  else
    TEST_ARGS=$@
  fi
  exec pytest $TEST_ARGS
}

case "$1" in
  worker)
    shift
    worker
    ;;
  server)
    shift
    server
    ;;
  scheduler)
    shift
    scheduler
    ;;
  dev_server)
    export FLASK_DEBUG=1
    exec /app/manage.py runserver --debugger --reload -h 0.0.0.0
    ;;
  debug)
    export FLASK_DEBUG=1
    export REMOTE_DEBUG=1
    exec /app/manage.py runserver --debugger --no-reload -h 0.0.0.0
    ;;
  shell)
    exec /app/manage.py shell
    ;;
  create_db)
    create_db
    ;;
  manage)
    shift
    exec /app/manage.py $*
    ;;
  tests)
    shift
    tests $@
    ;;
  help)
    shift
    help
    ;;
  *)
    exec "$@"
    ;;
esac

